#+title: Fixed Tree Example With Nu

* Single \(\nu\)-sample

** Simulating the dataset

The tool, =ape-sim.R=, can be used to simulate a dataset.

#+begin_src sh
  ./ape-sim.R -v single-nu-params.xml
#+end_src

The parameters for this are specified in the following JSON. They are not very
realistic, but they are convenient for a simple example.

#+begin_src xml :tangle single-nu-params.xml
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ape version="0.1.2">
 <configuration>
  <parameters birthRate="3.0"
              deathRate="1.0"
              samplingRate="0.5"
              occurrenceRate="0.5"
              duration="4.0"
              nu="0.5" />
  <options seed="1"
           writeNewick="true"
           makePlots="true"
           outputDirectory="out"
           simulateSequences="false"
           seq_agg_times=""
           occ_agg_times=""/>
 </configuration>
</ape>
#+end_src

The simulated data is shown in Figure [[fig:simulation][Y]].

#+caption: Full transmission tree and event counts
#+name: fig:simulation
#+attr_org: :width 700
[[./out/ape-simulation-figure.png]]

** Making the XML

*** Data munging

The file =out/ape-sim-reconstructed-tree.newick= contains a Newick string
describing the reconstructed tree. We can use this to generate a dummy FASTA
file describing the tips of the reconstructed tree.

#+begin_src R
  library(ape)
  library(phangorn)
  x <- read.tree("out/ape-sim-reconstructed-tree.newick")
  seqs <- simSeq(x, l = 1, rate = 0)
  write.phyDat(seqs, file = "out/sequences.fasta", format = "fasta")
#+end_src

And this snippet demonstrates how to extract the occurrence times, reverse them
and write them to a text file.

#+begin_src R
  x <- read.csv("out/ape-sim-event-times.csv")
  duration <- 4.0
  root_length <- abs(x[x$event == "origin", "time"])
  occurrence_times <- sort(x[x$event == "occurrence", "time"] + root_length)
  bwd_occurrence_times <- duration - occurrence_times
  writeLines(text = paste(bwd_occurrence_times,collapse = " "),
             con = "out/occurrence-times.txt")
#+end_src

*** Beauti for TimTam

The FASTA file can then be provided to Beauti to set up a scaffold for our
analysis file. All we need to do here is load the alignment, parse the tip dates
and save the resulting XML, the settings are fine for our purposes here.

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beauti.Beauti
#+end_src

To turn the XML into one that uses TimTam we need to make some edits:

1. copy the Newick string representation of the tree into a
   =beast.util.TreeParser= and make sure that the TimTam is referencing this,
2. include the disaster time relative to the last sequenced sample, into the
   =BackwardsSchedule= slot of the TimTam (it takes this value by default but it
   is nice to double check) and include the =BackwardsCounts= to describe how many
   cases were observed.
3. include the occurrence times into the =BackwardsPointProcess= input,
4. and finally delete references to anything relating to sequences and tree
   estimation since this is using a fixed tree
5. double check the log writes to =ft-with-nu-02.log=,
6. save the result to =ft-with-nu-02.xml=.

The following snippet is useful for specifying the known tree.

#+begin_src xml
  <init spec='beast.util.TreeParser' taxa='@sequences' id='Tree.t:sequences'
  IsLabelledNewick="true" adjustTipHeights="false" newick="" />
#+end_src

** MCMC and results

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite ft-with-nu-02.xml
#+end_src

We can get a quick inspection of the results using Tracer. The script
=posterior-visualisation.R= generates the visualisation of the posterior samples
shown below. See Figure [[fig:r-naught-prevalence][X]] for the posterior distribution of key summary
statistics and the \(\nu)-sampling probability.

#+caption: Posterior distribution of R-naught and the prevalence and the prior and posterior distributions of the nu-sampling probability.
#+name: fig:r-naught-prevalence
#+attr_org: :width 500
[[./out/posterior-plot.png]]

* Multiple \(\nu\)-samples

** Simulating the dataset

The tool, =ape-sim.R=, can be used to simulate a dataset in which the occurrence
data is aggregated in to counts in intervals. Technically this is not multiple
\(\nu\)-samples, but it is probably closer to what happens in reality so it is a
useful way to consider the problem.

#+begin_src sh
  ./ape-sim.R -v multi-nu-params.xml
#+end_src

The parameters for this are specified in the following JSON. They are not very
realistic, but they are convenient for a simple example. Note that now the data
is stored in =out/multi/=.

#+begin_src xml :tangle multi-nu-params.xml
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ape version="0.1.2">
 <configuration>
  <parameters birthRate="3.0"
              deathRate="1.0"
              samplingRate="0.5"
              occurrenceRate="0.5"
              duration="4.0" />
  <options seed="2"
           writeNewick="true"
           makePlots="true"
           outputDirectory="out/multi"
           simulateSequences="false"
           seq_agg_times=""
           occ_agg_times="0.0 4.0 0.5" />
 </configuration>
</ape>
#+end_src

The simulated data is shown in Figure [[fig:multi-nu-simulation][XY]] and the aggregated occurrence data is shown in Figure [[fig:multi-nu-simulation-agg][YY]]

#+caption: Simulation of transmission tree with histogram of leaf types.
#+name: fig:multi-nu-simulation
#+attr_org: :width 500
[[./out/multi/ape-simulation-figure.png]]

#+caption: Aggregated occurrence counts from the simulation shown in Figure [[fig:multi-nu-simulation][XY]].
#+name: fig:multi-nu-simulation-agg
#+attr_org: :width 500
[[./out/multi/ape-simulation-figure-aggregated.png]]

** Making the XML

*** Data munging

The file =out/multi/ape-sim-reconstructed-tree.newick= contains a Newick string
describing the reconstructed tree. We can use this to generate a dummy FASTA
file describing the tips of the reconstructed tree.

#+begin_src R
  library(ape)
  library(phangorn)
  x <- read.tree("out/multi/ape-sim-reconstructed-tree.newick")
  seqs <- simSeq(x, l = 1, rate = 0)
  write.phyDat(seqs, file = "out/multi/sequences.fasta", format = "fasta")
#+end_src

And this snippet demonstrates how to extract the aggregated occurrence events,
and write them to a text file.

#+begin_src R
    x <- read.csv("out/multi/ape-sim-aggregated-event-times.csv")
    duration <- 4.0
    root_length <- abs(x[x$event == "origin", "time"])
    disaster_times <- x[x$event == "nu", "time"] + root_length
    disaster_counts <- x[x$event == "nu", "size"]
    bwd_disaster_times <- duration - disaster_times

    writeLines(text = c(paste(sprintf("%.2f", bwd_disaster_times),collapse = " "),
                        paste(sprintf("%d", disaster_counts),collapse = " ")),
               con = "out/multi/disasters.txt")
#+end_src

*** Beauti for TimTam

The FASTA file can then be provided to Beauti to set up a scaffold for our
analysis file. All we need to do here is load the alignment, parse the tip dates
and save the resulting XML, the settings are fine for our purposes here.

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beauti.Beauti
#+end_src

To turn the XML into one that uses TimTam we need to make some edits:

1. Copy the Newick string representation in as above.
2. Include the disaster times and counts after looking up these values in
   =disasters.txt= generated above.
3. Remove any references to trees, sequences, and occurrences since they are not
   relevant here.
4. Use =ft-with-nu-03.log= as the log file and save this as =ft-with-nu-03.xml=.

** MCMC and results

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite ft-with-nu-03.xml
#+end_src

We can look at the posterior estimates of the prevalence of infection and the
rates to see how well this has recovered the parameters used in the simulation.
One complication with this is that we now have scheduled samples rather than
occurrences. We can get a crude estimate of the rate of occurrences from the
frequency of the scheduled samples. The frequency is two scheduled samples per
unit time so we need to multiply the probability by two to get our crude
estimate of the occurrence rate. This occurrence rate then allows us to extract
an estimate of the basic reproduction number.

The =posterior-visualisation-multi.R= script generates some figures to look at the
posterior samples.

#+caption: Posterior distribution of R-naught and the prevalence and the posterior distribution of the occurrence rate.
#+name: fig:r-naught-prevalence-multi
#+attr_org: :width 500
[[./out/posterior-plot-multi.png]]
