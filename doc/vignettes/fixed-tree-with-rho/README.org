#+title: Fixed Tree Example With Rho

** Simulating the dataset

The tool, =ape-sim.R=, can be used to simulate a dataset.

#+begin_src sh
  ./ape-sim.R --seed 1 -p my-params.json -o out --duration 4.0 --rho 0.5 --write-newick -v --make-plots
#+end_src

The parameters for this are specified in the following JSON. They are not very
realistic, but they are convenient for a simple example.

#+begin_src json :tangle my-params.json
  {
    "birthRate": 3.0,
    "deathRate": 1.0,
    "samplingRate": 0.5,
    "occurrenceRate": 0.5
  }
#+end_src

The simulated data is shown in Figure [[fig:simulation][Y]].

#+caption: Full transmission tree and event counts
#+name: fig:simulation
#+attr_org: :width 700
[[./out/ape-simulation-figure.png]]

** Making the XML

The file =out/ape-sim-reconstructed-tree.newick= contains a Newick string
describing the reconstructed tree. We can use this to generate a dummy FASTA
file describing the tips of the reconstructed tree.

#+begin_src R
  library(ape)
  library(phangorn)
  x <- read.tree("out/ape-sim-reconstructed-tree.newick")
  seqs <- simSeq(x, l = 1, rate = 0)
  write.phyDat(seqs, file = "out/sequences.fasta", format = "fasta")
#+end_src

And this snippet demonstrates how to extract the occurrence times, reverse them
and write them to a text file.

#+begin_src R
  x <- read.csv("out/ape-sim-event-times.csv")
  duration <- 4.0
  root_length <- abs(x[x$event == "origin", "time"])
  occurrence_times <- sort(x[x$event == "occurrence", "time"] + root_length)
  bwd_occurrence_times <- duration - occurrence_times
  writeLines(text = paste(bwd_occurrence_times,collapse = " "),
             con = "out/occurrence-times.txt")
#+end_src

The FASTA file can then be provided to Beauti to set up a scaffold for our
analysis file. All we need to do here is load the alignment, parse the tip dates
and save the resulting XML, the settings are fine for our purposes here.

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beauti.Beauti
#+end_src

To turn the XML into one that uses TimTam we need to make some edits:

- copy the Newick string representation of the tree into a =beast.util.TreeParser=
  and make sure that the TimTam is referencing this,
- include the catastrophe time, 0.0, into the =BackwardsSchedule= slot of the
  TimTam,
- include the occurrence times into the =BackwardsPointProcess= input,
- and finally delete references to anything relating to sequences and tree
  estimation.

** MCMC and results

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite analysis.xml
#+end_src

We can get a quick inspection of the results using Tracer. The script
=posterior-visualisation.R= generates the visualisation of the posterior samples
shown below. See Figure [[fig:r-naught-prevalence][X]] for the posterior distribution.

#+caption: Posterior distribution of R-naught and the prevalence.
#+name: fig:r-naught-prevalence
#+attr_org: :width 500
[[./out/posterior-plot.png]]

We can construct a similar analysis file using the BDSKY package but without
using the occurrence data to put the bias in R-naught into perspective. Figure [[fig:r-naught-comparison][Z]]
shows a comparison of the posterior distributions of R-naught obtained when
using TimTam and BDSKY, it shows that the bias appears to be due to this dataset
rather than a result of the approximation of the likelihood.

#+caption: Comparison of R-naught estimates using TimTam and BDSKY
#+name: fig:r-naught-comparison
#+attr_org: :width 500
[[./out/r-naught-comparison.png]]
