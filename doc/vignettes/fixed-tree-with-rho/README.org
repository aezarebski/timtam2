#+title: Fixed Tree Example With Rho
#+author: Alexander E. Zarebski
#+date: 2022:03:22

** Simulating the dataset

The tool, =ape-sim.R=, (version =0.1.6=) can be used to simulate a dataset.

#+begin_src sh
  Rscript ape-sim.R --verbose my-params.xml
#+end_src

The parameters for this are specified in the following XML. They are not very
realistic, but they are convenient for a simple example.

#+begin_src xml :tangle my-params.xml
  <ape version="0.1.2">
      <configuration>
          <parameters
              birthRate="3.0"
              deathRate="1.0"
              samplingRate="0.5"
              occurrenceRate="0.5"
              rho="0.5"
              duration="4.0" />
          <options
              seed="1"
              writeNewick="true"
              makePlots="true"
              outputDirectory="out"
              simulateSequences="false"
              seq_agg_times=""
              occ_agg_times="" />
      </configuration>
  </ape>
#+end_src

The simulated data is shown in Figure [[fig:simulation][Y]].

#+caption: Full transmission tree and event counts
#+name: fig:simulation
#+attr_org: :width 700
[[./out/ape-simulation-figure.png]]

** Making the XML

*** Data munging

The file =out/ape-sim-reconstructed-tree.newick= contains a Newick string
describing the reconstructed tree. We can use this to generate a dummy FASTA
file describing the tips of the reconstructed tree. Note that we set the seed so
that =simSeq= will always generate the same sequence (admittedly it is only of
length one.)

#+begin_src R :tangle data-munge.R
  library(ape)
  library(phangorn)
  set.seed(1)
  x <- read.tree("out/ape-sim-reconstructed-tree.newick")
  seqs <- simSeq(x, l = 1, rate = 0)
  write.phyDat(seqs, file = "out/sequences.fasta", format = "fasta")
#+end_src

And this snippet demonstrates how to extract the occurrence times, reverse them
and write them to a text file.

#+begin_src R :tangle data-munge.R
  x <- read.csv("out/ape-sim-event-times.csv")
  duration <- 4.0
  root_length <- abs(x[x$event == "origin", "time"])
  occurrence_times <- sort(x[x$event == "occurrence", "time"] + root_length)
  bwd_occurrence_times <- duration - occurrence_times
  writeLines(text = paste(bwd_occurrence_times,collapse = " "),
             con = "out/occurrence-times.txt")
#+end_src

This code can be found in the =data-munge.R= script.

*** Running Beauti

The FASTA file (=out/sequences.fasta=) can then be provided to Beauti to set up a
scaffold for our analysis file; because we are going to fix the tree and due to
some quirks of Beauti, this seems to be the easiest way to do this. You will
need to have the TimTam package installed for this to work.

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beauti.Beauti
#+end_src

*** Beauti for TimTam

1. Load =out/sequences.fasta= into Beauti as a nucleotide alignment.
2. Use tip dates and click through auto-configure to parse out the dates.
3. Set up the prior in the *Priors* tab
   * Select TimTam as the tree prior
   * Set the birth rate prior to \(\Gamma(6.0,0.5)\) and its initial value to
     \(3.0\).
   * Set the death rate to \(1.0\) and untick the estimate box.
   * Set the occurrence rate prior to \(\Gamma(2.0,0.25)\) and its initial value
     to \(0.5\).
   * Set the sampling rate prior to \(\Gamma(2.0,0.25)\) and its initial value
     to \(0.5\).
   * Set the root length to \(0.244539801768007\) (from =ape-sim-event-times.csv=)
     and untick the estimate box.
4. Save this as an XML file called =ft-with-2022-03-22.xml=. The name is important
   so that =xml-munge.R= knows where it is.
5. Use the =xml-munge.R= script to do some boring edits to obtain
   =ft-with-rho-2022-03-22-edited.xml=

*** Beauti for BDSky

1. Load =out/sequences.fasta= into Beauti as a nucleotide alignment.
2. Use tip dates and click through auto-configure to parse out the dates.
3. Set up the prior in the *Priors* tab
   * Select BDSKY serial as the tree prior
   * Set the prior for the becoming uninfectious rate to \(\Gamma(4.0,0.25) +
     1\) (i.e. with an offset of \(1.0\)).
   * Set the prior for the reproductive number to \(\Gamma(3.0,0.5) + 1\) (i.e.
     with an offset of \(1.0\)).
   * Set the prior for the sampling proportion to \(\Beta(2.0,6.0)\).
4. Save this as an XML file called =bdsky-serial-2022-03-22.xml=. The name is
   important so that =xml-munge-bdsky.R= knows where it is.
5. Use the =xml-munge-bdsky.R= script to do some boring edits to obtain
   =bdsky-serial-2022-03-22-edited.xml= and =bdsky-2022-03-22-edited.xml=, the
   latter of which handles the contemporaneous sample as well.

** MCMC and results

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite analysis.xml
#+end_src

Running the analysis with each of the new XML files should produce two log
files: =timtam-posterior.log= and =bdsky-posterior.log=. We can get a quick
inspection of the results using Tracer. The script =posterior-visualisation.R=
generates the visualisation of the posterior samples shown below. See Figure [[fig:r-naught-prevalence][X]]
for the posterior distribution.

#+caption: Posterior distribution of R-naught and the prevalence.
#+name: fig:r-naught-prevalence
#+attr_org: :width 500
[[./out/posterior-plot.png]]

Figure [[fig:r-naught-comparison][Z]] shows a comparison of the posterior distributions of R-naught obtained
when using TimTam and BDSKY, it shows that the bias appears to be due to this
dataset rather than a result of the approximation of the likelihood.

#+caption: Comparison of R-naught estimates using TimTam and BDSKY
#+name: fig:r-naught-comparison
#+attr_org: :width 500
[[./out/r-naught-comparison.png]]
