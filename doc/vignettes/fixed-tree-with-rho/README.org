#+title: Fixed Tree Example With Rho
#+author: Alexander E. Zarebski

** Simulating the dataset

The tool, =ape-sim.R=, can be used to simulate a dataset.

#+begin_src sh
  ./ape-sim.R --seed 1 -p my-params.json -o out --duration 4.0 --rho 0.5 --write-newick -v --make-plots
#+end_src

The parameters for this are specified in the following JSON. They are not very
realistic, but they are convenient for a simple example.

#+begin_src json :tangle my-params.json
  {
    "birthRate": 3.0,
    "deathRate": 1.0,
    "samplingRate": 0.5,
    "occurrenceRate": 0.5
  }
#+end_src

The simulated data is shown in Figure [[fig:simulation][Y]].

#+caption: Full transmission tree and event counts
#+name: fig:simulation
#+attr_org: :width 700
[[./out/ape-simulation-figure.png]]

** Making the XML

*** Data munging

The file =out/ape-sim-reconstructed-tree.newick= contains a Newick string
describing the reconstructed tree. We can use this to generate a dummy FASTA
file describing the tips of the reconstructed tree. Note that we set the seed so
that =simSeq= will always generate the same sequence (admittedly it is only of
length one.)

#+begin_src R :tangle data-munge.R
  library(ape)
  library(phangorn)
  set.seed(1)
  x <- read.tree("out/ape-sim-reconstructed-tree.newick")
  seqs <- simSeq(x, l = 1, rate = 0)
  write.phyDat(seqs, file = "out/sequences.fasta", format = "fasta")
#+end_src

And this snippet demonstrates how to extract the occurrence times, reverse them
and write them to a text file.

#+begin_src R :tangle data-munge.R
  x <- read.csv("out/ape-sim-event-times.csv")
  duration <- 4.0
  root_length <- abs(x[x$event == "origin", "time"])
  occurrence_times <- sort(x[x$event == "occurrence", "time"] + root_length)
  bwd_occurrence_times <- duration - occurrence_times
  writeLines(text = paste(bwd_occurrence_times,collapse = " "),
             con = "out/occurrence-times.txt")
#+end_src

This code can be found in the =data-munge.R= script.

*** Beauti for TimTam

The FASTA file (=out/sequences.fasta=) can then be provided to Beauti to set up a
scaffold for our analysis file; because we are going to fix the tree and due to
some quirks of Beauti, this seems to be the easiest way to do this. You will
need to have the TimTam package installed for this to work.

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beauti.Beauti
#+end_src

1. Load =out/sequences.fasta= into Beauti as a nucleotide alignment.
2. Use tip dates and click through auto-configure to parse out the dates.
3. Set up the prior in the *Priors* tab
   * Select TimTam as the tree prior
   * Set the priors for the birth rate, occurrence rate and sampling rate to
     gamma distributions with parameters \((6,0.5)\), \((2,0.25)\),
     and\((2,0.25)\) respectively.
4. Save this as a suitable XML file, e.g., =fixed-tree-with-rho-2022-03-11.xml=
   * (Optional:) use a tool such as =js-beautify= to format the XML.
5. Use the =xml-munge.R= script to do some boring edits to obtain
   =fixed-tree-with-rho-2022-03-11-edited.xml=

*** Beauti for BDSky

Use BDSky serial sampling to create =fixed-tree-with-rho-02.xml= and tweak it to
use the same fixed tree and origin as the TimTam file. Then use BDSky
Contemporaneous sampling to create =fixed-tree-with-rho-03.xml= and then modify it
to include serial sampling based on the content of =fixed-tree-with-rho-02.xml=.
The result is an XML file for serial sampling with a single contemporaneous
sample.

** MCMC and results

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite analysis.xml
#+end_src

We can get a quick inspection of the results using Tracer. The script
=posterior-visualisation.R= generates the visualisation of the posterior samples
shown below. See Figure [[fig:r-naught-prevalence][X]] for the posterior distribution.

#+caption: Posterior distribution of R-naught and the prevalence.
#+name: fig:r-naught-prevalence
#+attr_org: :width 500
[[./out/posterior-plot.png]]

Figure [[fig:r-naught-comparison][Z]] shows a comparison of the posterior distributions of R-naught obtained
when using TimTam and BDSKY, it shows that the bias appears to be due to this
dataset rather than a result of the approximation of the likelihood.

#+caption: Comparison of R-naught estimates using TimTam and BDSKY
#+name: fig:r-naught-comparison
#+attr_org: :width 500
[[./out/r-naught-comparison.png]]
