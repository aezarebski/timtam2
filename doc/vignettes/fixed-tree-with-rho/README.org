#+title: Fixed Tree Example With Rho
#+author: Alexander E. Zarebski
#+Time-stamp: <Last modified: 2022-03-28 14:18:46>

* Use case: Estimating \(R_0\) and prevalence

- CHARACTERISTIC INFORMATION
  + Goal in context: User wants to estimate the reproductive number and
    prevalence of infection at present.
  + Preconditions: The user has read the TimTam paper and is familiar with
    BEAST2. User has a phylogeny connecting scheduled and unscheduled samples, a
    point process of unsequenced data, and knows the value of the [[file:./../readme.org::*Death rate][natural
    recovery rate]]
  + Success end condition: The user has the estimates they want.
  + Failed end condition: The user cannot generate estimates or needs to request
    help.
- MAIN SUCCESS SCENARIO
  + User uses Beauti and text editor (or R script) to set up analysis.
  + User runs MCMC program.
  + User uses R script to get visualisations of the results.
- EXTENSIONS
  + User wants to compare this to results they would have obtained from the
    phylogeny alone, without the point process of unsequenced data.
  + User wants to try time varying rate parameters.
- VARIATIONS
  + User wants to use a different parameterisation.
- RELATED INFORMATION
  + Priority: Top
  + Performance target: Large MCMC sample size in less than 24 hours.
  + Frequency: 5/year
- SCHEDULE
- OPEN ISSUES
  + How do we specify the time varying parameters.

* Simulating the dataset

For the sake of this vignette, we will simulate a dataset to use. This has the
advantage that we will know the true values of the parameters we are trying to
estimate. The tool, =ape-sim.R=, (version =0.2.0=) can be used to simulate a
dataset. This script is included in the repository.

#+begin_src sh
  Rscript ape-sim.R --verbose sim-const-params.xml
#+end_src

The parameters for this are specified in the following XML. They are not very
realistic, but they are convenient for a simple example. The correspond to a
single scheduled sequenced sample (i.e. a catastrophe) at the end of the
simulation duration and no scheduled unsequenced samples (i.e. disasters).

#+begin_src xml :tangle sim-const-params.xml
  <ape version="0.2.0">
      <configuration>
          <parameters
              birthRate="3.0"
              deathRate="1.0"
              samplingRate="0.5"
              occurrenceRate="0.5"
              rho="0.25"
              duration="5.0" />
          <options
              seed="7"
              writeNewick="true"
              makePlots="true"
              outputDirectory="out"
              simulateSequences="false"
              seq_agg_times=""
              occ_agg_times="" />
      </configuration>
  </ape>
#+end_src

The simulated data is shown in Figure [[fig:simulation][Y]].

#+caption: Full transmission tree and event counts
#+name: fig:simulation
#+attr_org: :width 700
[[./out/ape-simulation-figure.png]]

The next step is to turn this simulation into the sort of data set that the user
may start with: a phylogeny connecting the sequenced cases and a point process
of unsequenced cases.

** Data munging

There is some data munging required to get the simulated data into a format that
is easier to include in the XML for the analysis so we will do that now. We
start by loading some useful libraries and reading the simulation configuration.

#+begin_src R :tangle data-munge.R
  library(ape)
  library(phangorn)
  library(xml2)
  set.seed(1)

  config <- read_xml("sim-const-params.xml")
  duration <- as.numeric(
    xml_attr(
      xml_find_first(config, "//parameters"),
      "duration")
  )
  out_dir <- xml_attr(
    xml_find_first(config, "//options"),
    "outputDirectory"
  )
#+end_src

The file =out/ape-sim-reconstructed-tree.newick= contains a Newick string
describing the reconstructed tree. We can use this to generate a dummy FASTA
file describing the tips of the reconstructed tree. Note that we set the seed so
that =simSeq= will always generate the same sequence (admittedly it is only of
length one and is never actually used in the analysis.)

#+begin_src R :tangle data-munge.R
  tree <- read.tree(file.path(out_dir, "ape-sim-reconstructed-tree.newick"))
  write.phyDat(
    simSeq(tree, l = 1, rate = 0),
    file = file.path(out_dir, "sequences.fasta"),
    format = "fasta"
  )
#+end_src

And this snippet demonstrates how to extract the occurrence times, reverse them
and write them to a text file.

#+begin_src R :tangle data-munge.R
  x <- read.csv(file.path(out_dir, "ape-sim-event-times.csv"))
  root_length <- abs(x[x$event == "origin", "time"])
  occurrence_times <- sort(x[x$event == "occurrence", "time"] + root_length)
  bwd_occurrence_times <- duration - occurrence_times
  writeLines(text = paste(bwd_occurrence_times, collapse = " "),
             con = file.path(out_dir, "occurrence-times.txt"))
#+end_src

This code can be found in the =data-munge.R= script. At this point, we have the
data from the user:

- A phylogeny connecting the sequenced samples encoded in
  + =out/sequences.fasta=,
  + =out/ape-sim-event-times.csv= (for the root length), and
  + =out/ape-sim-reconstructed-tree.newick=.
- A list of unscheduled unsequenced sample time in =out/occurrence-times.txt=.
- The known death rate in =sim-const-params.xml=

* Making the XML

** Model assumptions

- the prior distribution for the scheduled sequence sampling probability is \(\rho\sim\text{Beta}(4,6)\).

** Running Beauti

The FASTA file (=out/sequences.fasta=) can then be provided to Beauti to set up a
scaffold for our analysis file; because we are going to fix the tree and due to
some quirks of Beauti, this seems to be the easiest way to do this. You will
need to have the TimTam package installed for this to work.

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beauti.Beauti
#+end_src

** Beauti for TimTam

1. Load =out/sequences.fasta= into Beauti as a nucleotide alignment.
2. Use tip dates and click through auto-configure to parse out the dates.
3. Set up the prior in the *Priors* tab
   * Select TimTam as the tree prior
   * Set the birth rate prior to \(\Gamma(6.0,0.5)\) and its initial value to
     \(3.0\).
   * Set the death rate to \(1.0\) and untick the estimate box.
   * Set the occurrence rate prior to \(\Gamma(2.0,0.25)\) and its initial value
     to \(0.5\).
   * Set the sampling rate prior to \(\Gamma(2.0,0.25)\) and its initial value
     to \(0.5\).
   * Set the root length to \(0.847096238234892\) (from =ape-sim-event-times.csv=)
     and untick the estimate box.
4. Save this as an XML file called =ft-with-rho-2022-03-28.xml=. The name is
   important so that =xml-munge-timtam.R= knows where it is.
5. Use the =xml-munge-timtam.R= script to do some boring edits to obtain
   =fixed-tree-with-rho-2022-03-28-edited.xml=

** Beauti for BDSky

1. Load =out/sequences.fasta= into Beauti as a nucleotide alignment.
2. Use tip dates and click through auto-configure to parse out the dates.
3. Set up the prior in the *Priors* tab
   * Select BDSKY serial as the tree prior
   * Set the prior for the becoming uninfectious rate to \(\Gamma(4.0,0.25) +
     1\) (i.e. with an offset of \(1.0\)).
   * Set the prior for the reproductive number to \(\Gamma(3.0,0.5) + 1\) (i.e.
     with an offset of \(1.0\)).
   * Set the prior for the sampling proportion to \(\Beta(2.0,6.0)\).
4. Save this as an XML file called =bdsky-serial-2022-03-22.xml=. The name is
   important so that =xml-munge-bdsky.R= knows where it is.
5. Use the =xml-munge-bdsky.R= script to do some boring edits to obtain
   =bdsky-serial-2022-03-22-edited.xml= and =bdsky-2022-03-22-edited.xml=, the
   latter of which handles the contemporaneous sample as well.

* MCMC and results

** Running the MCMC

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite analysis.xml
#+end_src

Running the analysis with each of the new XML files should produce two log
files: =timtam-posterior.log= and =bdsky-posterior.log=. We can get a quick
inspection of the results using Tracer.

** Visualising the results

#+begin_src sh
  cp ../../../timtam-posterior.log out/
  cp ../../../bdsky-posterior.log out/
#+end_src

The script =posterior-visualisation.R= generates the visualisation of the
posterior samples shown below. To actually make use of them you will need to
copy them into =out/=. See Figure [[fig:r-naught-prevalence][X]] for the posterior distribution.

#+caption: Posterior distribution of R-naught and the prevalence.
#+name: fig:r-naught-prevalence
#+attr_org: :width 500
[[./out/posterior-plot.png]]

Figure [[fig:r-naught-comparison][Z]] shows a comparison of the posterior distributions of R-naught obtained
when using TimTam and BDSKY, it shows that the bias appears to be due to this
dataset rather than a result of the approximation of the likelihood.

#+caption: Comparison of R-naught estimates using TimTam and BDSKY
#+name: fig:r-naught-comparison
#+attr_org: :width 500
[[./out/r-naught-comparison.png]]

#  LocalWords:  unsequenced Beauti TimTam uninfectious
