#+title: Estimated Tree Example With Rho

** Simulating the dataset

*** Simulating the epidemic and sequences

The tool, =ape-sim.R=, can be used to simulate a dataset.

#+begin_src sh
  Rscript ape-sim.R --verbose my-params.xml
#+end_src

The parameters for this are specified in the following JSON. They are not very
realistic, but they are convenient for a simple example.

#+begin_src xml :tangle my-params.xml
  <ape version="0.1.2">
    <configuration>
      <parameters
          birthRate="3.0"
          deathRate="1.8"
          samplingRate="0.05"
          occurrenceRate="0.15"
          rho="0.01"
          duration="7.0"
          substitutionRate="5e-3"
          seqLength="20000" />
      <options
          seed="1"
          writeNewick="true"
          makePlots="true"
          outputDirectory="out"
          simulateSequences="true"
          seq_agg_times=""
          occ_agg_times="" />
    </configuration>
  </ape>
#+end_src

*** Checking for signal in the sequence data

We can read the tree into [[http://dx.doi.org/10.1093/ve/vew007][TempEst]] to determine if there is sufficient signal in
the data us to estimate the timing of internal nodes. The following script
writes a neighbour-joining tree to a NEXUS file so we can read it into TempEst.
Note that we need to use a method here that is distance based for the results to
be meaningful.

#+begin_src R :tangle non-clock-tree.R
  library(phangorn)

  alignment_fasta <- "out/ape-sim-sequences.fasta"
  tree_nexus <- "out/phangorn-nj-tree.nexus"

  alignment <- read.phyDat(
    file = alignment_fasta,
    format = "fasta",
    type = "DNA"
  )
  unrooted_tree <- nj(as.DNAbin(alignment))

  write.nexus(unrooted_tree, file = tree_nexus)
#+end_src

The results of TempEst are stored in =out/tempest-output.txt=.

#+begin_src R
  library(ggplot2)
  x <- read.table("out/tempest-output.txt",
                  sep = "\t", header = TRUE)
  ggplot(x, aes(x = date, y = distance)) +
    geom_point() +
    geom_smooth(method="lm", se=FALSE)
  ggsave("out/temptest-output.png")
  print(confint(lm(distance ~ date, x)))
#+end_src

Which gives the following output

#+begin_src
>                  2.5 %   97.5 %
(Intercept) -50.382857 70.56174
date          1.660345 21.22530
#+end_src

and the figure [[fig:tempest-style-figure]]

#+caption: TempEst style root-to-tip figure.
#+name: fig:tempest-style-figure
#+attr_org: :width 300
[[./out/temptest-output.png]]

** Making the XML

*** Data munging

#+begin_src R :tangle munge-data.R
  library(xml2)

  config <- read_xml("my-params.xml")
  params <- xml_find_first(config, "//parameters")
  opts <- xml_find_first(config, "//options")
  output_dir <- xml_attr(opts, "outputDirectory")
  duration <- as.numeric(xml_attr(params, "duration"))
  x <- read.csv(sprintf("%s/ape-sim-event-times.csv", output_dir))
  root_length <- abs(x[x$event == "origin", "time"])
  occurrence_times <- sort(x[x$event == "occurrence", "time"] + root_length)
  bwd_occurrence_times <- duration - occurrence_times
  writeLines(text = paste(bwd_occurrence_times,collapse = " "),
             con = sprintf("%s/occurrence-times.txt", output_dir))
#+end_src

*** Running Beauti

Fire up Beauti and carry out the following steps:

1. Load =out/ape-sim-sequences.fasta= and use the tip-dates (via
   auto-configuration).
2. Select the TimTam prior and make some tweaks for this example:
   - Fix the clock rate to \(0.005\) without estimation.
   - Fix \(\nu = 0.0\) and do not estimate it.
   - Fix \(\mu\) to the true value (\(\1.8\)) and do not estimate it.
   - Fix the root length to \(0.05066847\) and reduce the upper bound to 10. This
     value can be found in =ape-sim-event-times.csv=.
   - Set the initial value of \(\lambda\) to \(3.0\) and the prior as
     \(\Gamma(6.0,0.5)\).
   - Set the initial value of \(\psi\) to \(0.5\) and the prior as
     \(\Gamma(2.0,0.5)\).
3. Save the configuration as =et-with-rho-2022-03-21.xml=.
4. Run the =munge-xml.R= script to do some find tuning of the XML. This will
   produce =et-with-rho-2022-03-21-edited.xml=.

** MCMC and results

Run the analysis defined in the XML

#+begin_src sh
  java -cp <path/to/beast.jar> beast.app.beastapp.BeastMain -seed 1 -overwrite analysis.xml
#+end_src

We can get a quick inspection of the results using Tracer. The script
=posterior-visualisation.R= generates the visualisation of the posterior samples
shown below.

#+attr_org: :width 500
[[./out/posterior-plot.png]]

#  LocalWords:  Beauti TimTam
